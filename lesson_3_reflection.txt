When would you want to use a remote repository rather than keeping all your work

   When I want to share my work to others, or sharing things between different computer

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with youur remote respository?

   I might still working on my local version copy and not really to merge the new code. Pull manually I can have the full control when my current version is stable and ready

Describe the differences between forks, clones, and branches. When would you use one instead of another?

   forks is GitHub feature, it is nothing about git!! You can use this to clone someone repository in your GitHub repositories directly.

   clones is Git stuff and it is used to make a copy of complete history of another repository.

   branches is another version copy of of the repository, you can have different branches to maintenance different changes or version of your stuff.

What is the benefit of having a copy of the last known state of the remote stored locally?

   We can check the different between remote and local, and apply the remote master changes to our local later
   In other words, can have full control of when to merge the code and push them back to remote repository

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

   Previous I used CVS, perforce for development version control, but it is missing collaboration part. There is no central control of what can be committed to the central repository. And do not have a central place for communication between developers. We just simply use e-mail to communicate about the code change, etc.

   By using GitHub, we can have a final control in terms of what should be committed to the remote repository. There is collaboration platform we can use to leave a note, comment, to communicate between developers.

   However, as the complexity of Git and GitHub, and the concept behind, functionalities are quite different from tranditional central repository version-control system. Learning curve is required to get used to it.

When would you want to make changes in s separate branch rather than directly in master? What benefits does each approach have?

   In a single environment, meaning work alone, sometimes you might want to try something that might not be used, or not sure it is good for doing that, or sometimes when doing different task, enhancement in the same time. Working on different branch can have a full control on what will be used, and what will be discard later.

   From collaboration perspectives, it is useful for each one working on their own branch, and merge them back to master, so code merge to master can be well tested individually especially there is merge conflict.
   